/*! For license information please see SilenceDetectorProcessor.js.LICENSE.txt */
(()=>{"use strict";class e extends AudioWorkletProcessor{constructor(...e){super(...e),this.keepAlive=!0,this.port.onmessage=e=>{"destroy"===e.data&&(this.keepAlive=!1)}}}registerProcessor("SilenceDetectorProcessor",class extends e{constructor(e){super(e);const t=e.processorOptions?.initialDuration??0;this._lastLoudSampleTime=currentTime-t;const s=sampleRate*e.parameterData.durationThreshold;this._lastTimePostedSilenceStart=this.isPastDurationThreshold(s)}static get parameterDescriptors(){return[{name:"volumeThreshold",defaultValue:.1,minValue:0,maxValue:1,automationRate:"k-rate"},{name:"durationThreshold",minValue:0,automationRate:"k-rate"}]}isPastDurationThreshold(e){return currentTime>=this._lastLoudSampleTime+e}process(e,t,s){const r=s.volumeThreshold[0],i=e[0];if(0===i.length)return this._lastLoudSampleTime=currentTime,this.keepAlive;const o=i[0],a=i[0].length;for(let e=0;e<a;e++)if(o[e]>=r){if(this._lastLoudSampleTime=currentTime,this._lastTimePostedSilenceStart){const e=[0,currentTime];this.port.postMessage(e),this._lastTimePostedSilenceStart=!1}}else if(!this._lastTimePostedSilenceStart&&this.isPastDurationThreshold(s.durationThreshold[0])){const e=[1,currentTime];this.port.postMessage(e),this._lastTimePostedSilenceStart=!0}return this.keepAlive}})})();