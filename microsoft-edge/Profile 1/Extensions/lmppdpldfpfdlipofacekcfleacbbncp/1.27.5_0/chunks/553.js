/*! For license information please see 553.js.LICENSE.txt */
"use strict";(self.webpackChunkjump_cutter=self.webpackChunkjump_cutter||[]).push([[553],{7553:(e,t,i)=>{i.d(t,{default:()=>p});var n=i(5029),s=i(4530),a=i(4838);function h({startValue:e,endValue:t,startTime:i,endTime:n}){return(n-i+(e-t))/(n-i)}var o=i(5418);function l(e,t,i){const n=function(e,t,i){return e*t/i}(e,t,i);return n-e}var c=i(5406);function d(e,t,i){return 0+l(e/i,i,t)}var r=i(2803);const u={2:"normalSpeedGain",1:"speedUpGain",0:"slowDownGain"};class p{constructor(e,t,i=0,h,o){this.context=e,this.getSettings=h,this.getLookaheadDelay=o,this.connect=this.connectOutputTo,this.speedUpGain=e.createGain(),this.slowDownGain=e.createGain(),this.normalSpeedGain=e.createGain(),this.speedUpGain.gain.value=0,this.slowDownGain.gain.value=0,this.normalSpeedGain.gain.value=1;const l=(0,n.SD)();(0,n.o)(e),this.toneContext=(0,n.SD)(),l.dispose(),this.speedUpPitchShift=new a.h,this.slowDownPitchShift=new a.h,this.speedUpPitchShift.windowSize=.1,this.slowDownPitchShift.windowSize=.1,this.originalPitchCompensationDelay=e.createDelay(.05),this.originalPitchCompensationDelay.delayTime.value=.05,this.delayNode=e.createDelay(t),this.delayNode.delayTime.value=i,this.delayNode.connect(this.speedUpGain),this.delayNode.connect(this.slowDownGain),this.delayNode.connect(this.normalSpeedGain),(0,s.Ng)(this.speedUpGain,this.speedUpPitchShift),(0,s.Ng)(this.slowDownGain,this.slowDownPitchShift),this.normalSpeedGain.connect(this.originalPitchCompensationDelay)}get pitchCorrectorDelay(){return this.originalPitchCompensationDelay.delayTime.value}get stretcherDelay(){return this.delayNode.delayTime.value}get totalDelay(){return this.stretcherDelay+this.pitchCorrectorDelay}connectInputFrom(e){e.connect(this.delayNode)}connectOutputTo(e){this.speedUpPitchShift.connect(e),this.slowDownPitchShift.connect(e),this.originalPitchCompensationDelay.connect(e)}onSilenceEnd(e){(0,r.K)(this.lastScheduledStretch&&this.lastElementSpeedChangeAtInputTime);const t=this.lastScheduledStretch,i=this.lastElementSpeedChangeAtInputTime;this.lastElementSpeedChangeAtInputTime=e;const n=this.getLookaheadDelay(),s=this.getSettings(),a=(e-i)*s.silenceSpeed,c=Math.min(a,s.marginBefore),d=c/s.silenceSpeed,u=(s.marginBefore-c)/s.soundedSpeed,p=e-d-u,S=function(e,t,i){const n=i,s=(0,o.M)(t,n.endValue);if(e+s>=n.endTime)return e+s;{const i=(e+(0,o.M)(t,n.startValue)-n.startTime)/h(n);return n.startTime+i}}(p,n,t),m=S-p-n;S<t.endTime&&this.interruptLastScheduledStretch(m,S);const g=S+u,w=m+l(d,s.silenceSpeed,s.soundedSpeed),T=m,y=w,f=g,D=e+(0,o.M)(n,w);this.stretch(T,y,f,D)}onSilenceStart(e){this.lastElementSpeedChangeAtInputTime=e;const t=this.getSettings(),i=(0,c.I)(t.marginBefore,t.soundedSpeed),n=d(t.marginBefore,t.soundedSpeed,t.silenceSpeed),s=e+((0,o.M)(this.getLookaheadDelay(),n)-i),a=s+n/(t.silenceSpeed/t.soundedSpeed-1);this.stretch(n,0,s,a)}setOutputPitchAt(e,t,i){const n=5e-4,s=t-n,a=t+n,h=this[u[i]],o=this[u[e]];h.gain.setValueAtTime(1,s),o.gain.setValueAtTime(0,s),h.gain.linearRampToValueAtTime(0,a),o.gain.linearRampToValueAtTime(1,a)}stretch(e,t,i,n){if(e===t)return;this.delayNode.delayTime.setValueAtTime(e,i).linearRampToValueAtTime(t,n);const s=t>e?0:1;this.setOutputPitchAt(s,i,2),this.setOutputPitchAt(2,n,s);const a=h({startValue:e,endValue:t,startTime:i,endTime:n});setTimeout((()=>{var e;(1===s?this.speedUpPitchShift:this.slowDownPitchShift).pitch=(e=a,-12*Math.log2(e))}),1e3*(i-this.context.currentTime-.05)),this.lastScheduledStretch={startValue:e,endValue:t,startTime:i,endTime:n,speedupOrSlowdown:s}}interruptLastScheduledStretch(e,t){(0,r.K)(this.lastScheduledStretch,"Called `interruptLastScheduledStretch`, but no stretch has been scheduled yet"),this.delayNode.delayTime.cancelScheduledValues(t).linearRampToValueAtTime(e,t);const i=[this.speedUpGain,this.slowDownGain,this.normalSpeedGain];for(const e of i)e.gain.cancelScheduledValues(t);this.setOutputPitchAt(2,t,this.lastScheduledStretch.speedupOrSlowdown)}onSettingsUpdate(){const e=this.getSettings();this.delayNode.delayTime.value=d(e.marginBefore,e.soundedSpeed,e.silenceSpeed)}destroy(){const e=[this.speedUpPitchShift,this.slowDownPitchShift];for(const t of e)t.dispose();this.toneContext.dispose()}}}}]);